from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import pandas as pd
import time
import random
import tkinter as tk
from tkinter import simpledialog
from datetime import datetime
from selenium.common.exceptions import NoSuchElementException, TimeoutException

# Caixa de di√°logo para entrada de URL
root = tk.Tk()
root.withdraw()
url = simpledialog.askstring("LinkedIn Scraper", "Cole aqui o link da p√°gina de vagas do LinkedIn:")

if not url:
    print("‚ùå Nenhum link foi fornecido. Encerrando o script.")
    exit()

# Configura√ß√£o do navegador
options = Options()
options.add_argument("--start-maximized")
driver = webdriver.Chrome(options=options)
driver.get(url)

input("üîê Fa√ßa login no LinkedIn no navegador aberto e pressione ENTER aqui para continuar...")

vagas = []
links_vagas_extraidas = set()  # Usado para evitar duplica√ß√£o de links de vagas

def scrollar_descricao():
    try:
        descricao_area = driver.find_element(By.CLASS_NAME, 'jobs-description__content')
        driver.execute_script("arguments[0].scrollTop = arguments[0].scrollHeight", descricao_area)
        time.sleep(0.2)
    except:
        pass

def extrair_dados_vaga(card, index, total):
    try:
        start = time.time()
        driver.execute_script("arguments[0].scrollIntoView();", card)
        card.click()
        WebDriverWait(driver, 7).until(
            EC.presence_of_element_located((By.CLASS_NAME, 'jobs-details__main-content'))
        )
        scrollar_descricao()

        try:
            titulo = card.find_element(By.CSS_SELECTOR, 'a.job-card-list__title--link').text.strip()
        except:
            titulo = ""

        try:
            empresa = card.find_element(By.CSS_SELECTOR, 'div.artdeco-entity-lockup__subtitle span').text.strip()
        except:
            empresa = ""

        try:
            descricao = driver.find_element(By.CLASS_NAME, 'jobs-description__content').text.strip()
        except:
            descricao = ""

        try:
            spans = driver.find_elements(By.CSS_SELECTOR, 'span.tvm__text.tvm__text--low-emphasis')
            data = next((s.text.strip() for s in spans if "h√°" in s.text), "")
        except:
            data = ""

        link = driver.current_url

        if link in links_vagas_extraidas:  # Evitar duplica√ß√£o
            print(f"[INFO] Vaga {index+1}/{total} j√° extra√≠da. Ignorando.")
            return None

        links_vagas_extraidas.add(link)  # Adiciona o link ao conjunto para evitar duplica√ß√£o

        tempo_exec = round(time.time() - start, 2)
        print(f"‚úÖ Vaga {index+1}/{total} extra√≠da em {tempo_exec}s: {titulo[:50]}...")

        return {
            "T√≠tulo": titulo,
            "Empresa": empresa,
            "Data de Publica√ß√£o": data,
            "Resumo": descricao,
            "Link": link
        }
    except TimeoutException as e:
        print(f"[ERRO] Vaga {index+1}/{total} falhou por timeout: {e}")
        return None
    except Exception as e:
        print(f"[ERRO] Vaga {index+1}/{total} falhou: {e}")
        return None

def extrair_vagas_pagina():
    print("‚û°Ô∏è Iniciando extra√ß√£o de vagas desta p√°gina")
    inicio_pagina = time.time()

    vagas_extraidas = 0  # Para contar o n√∫mero de vagas extra√≠das na p√°gina
    index = 0
    while True:
        cards = driver.find_elements(By.CLASS_NAME, 'job-card-container')
        total = len(cards)
        if index >= total:
            break
        vaga = extrair_dados_vaga(cards[index], index, total)
        if vaga:
            vagas.append(vaga)
            vagas_extraidas += 1
        index += 1
        time.sleep(random.uniform(0.5, 1.1))  # mais r√°pido, por√©m seguro

    duracao = round(time.time() - inicio_pagina, 2)
    print(f"‚è± P√°gina finalizada em {duracao}s com {vagas_extraidas} vagas acumuladas.\n")
    
    return vagas_extraidas

def proxima_pagina(pagina_atual):
    try:
        proximo_botao = driver.find_element(By.XPATH, f'//button[@aria-label="P√°gina {pagina_atual + 1}"]')
        driver.execute_script("arguments[0].click();", proximo_botao)
        WebDriverWait(driver, 10).until(
            EC.staleness_of(proximo_botao)
        )
        time.sleep(2)
        return True
    except NoSuchElementException:
        print("[INFO] N√£o h√° pr√≥xima p√°gina.")
        return False
    except Exception as e:
        print(f"[INFO] Falha ao carregar pr√≥xima p√°gina: {e}")
        return False

def atualizar_pagina():
    print("üîÑ Atualizando a p√°gina devido √† quantidade insuficiente de vagas...")
    driver.refresh()
    time.sleep(5)

# Loop principal
pagina = 1
print("üìÖ In√≠cio da extra√ß√£o:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
while True:
    print(f"\nüìÑ P√°gina {pagina}")
    vagas_extraidas = extrair_vagas_pagina()

    # Se menos de 25 vagas foram extra√≠das, atualiza a p√°gina e recome√ßa
    if vagas_extraidas < 25:
        atualizar_pagina()
        
        # Verifica se a atualiza√ß√£o n√£o resultou em novas vagas extra√≠das
        vagas_extraidas_atualizadas = extrair_vagas_pagina()
        if vagas_extraidas_atualizadas == 0:  # Se n√£o houver vagas extra√≠das
            print(f"üìÑ P√°gina {pagina} j√° foi totalmente explorada e n√£o h√° novas vagas.")
            # Vai para a pr√≥xima p√°gina sem ficar tentando as mesmas vagas
            if not proxima_pagina(pagina):
                break
            pagina += 1
        else:
            print(f"üìÑ P√°gina {pagina} tem novas vagas ap√≥s atualiza√ß√£o.")
    else:
        # Caso contr√°rio, vai para a pr√≥xima p√°gina
        if not proxima_pagina(pagina):
            break
        pagina += 1

# Salvar os dados
if vagas:
    df = pd.DataFrame(vagas)
    nome_arquivo = f"vagas_linkedin_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    df.to_excel(nome_arquivo, index=False)
    print(f"‚úÖ Vagas salvas em '{nome_arquivo}'")
else:
    print("‚ùå Nenhuma vaga foi extra√≠da.")

driver.quit()